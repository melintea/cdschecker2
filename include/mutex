/**
 * @file mutex
 * @brief C++11 mutex interface header
 */

#ifndef __CXX_MUTEX__
#define __CXX_MUTEX__

#include "model-assert.h"
#include "modeltypes.h"

namespace std {

struct mutex_state {
	void *locked; /* Thread holding the lock */
	thread_id_t alloc_tid;
	modelclock_t alloc_clock;
};

class mutex {
public:
	mutex();
	~mutex() {}

    mutex(const mutex&)            = delete;
    mutex& operator=(const mutex&) = delete;
    mutex(mutex&&)                 = delete;
    mutex& operator=(mutex&&)      = delete;

	void lock();
	bool try_lock();
	void unlock();
	struct mutex_state * get_state() {return &state;}
	
private:
	struct mutex_state state;
};


/*
 * Minimal implementation. Not fully standard compliant.
 */
template <typename MUTEX_T>
class lock_guard
{
public:

	explicit lock_guard(MUTEX_T& mtx) : _mutex(mtx) { _mutex.lock(); }
	lock_guard()                             = delete;
	~lock_guard() { _mutex.unlock(); }

    lock_guard(const lock_guard&)            = delete;
    lock_guard& operator=(const lock_guard&) = delete;
    lock_guard(lock_guard&&)                 = delete;
    lock_guard& operator=(lock_guard&&)      = delete;

private:

    MUTEX_T& _mutex;
}; //lock_guard

/*
 * Minimal implementation. Not fully standard compliant.
 */
template <typename MUTEX_T>
class unique_lock
{
public:

	explicit unique_lock(MUTEX_T& mtx) : _mutex(mtx) { _mutex.lock(); }
	unique_lock()                              = delete;
	~unique_lock() { _mutex.unlock(); }

    unique_lock(const unique_lock&)            = delete;
    unique_lock& operator=(const unique_lock&) = delete;
    unique_lock(unique_lock&&)                 = delete;
    unique_lock& operator=(unique_lock&&)      = delete;

private:

    MUTEX_T& _mutex;
}; //unique_lock


} // std

#endif /* __CXX_MUTEX__ */
